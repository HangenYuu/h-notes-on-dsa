---
title: "Heap"
author: "Pham Nguyen Hung"
date: last-modified
date-format: long
draft: false
toc: true
---
# Heap

## Definition

Heap, or priority queue, is a data structure that supports quick searching of the *prioritized* element such as the minimum or maximum in an array. It is commonly represented as a complete binary tree such as below

![](heap 1.png)

The tree has the following properties:

1. Complete binary tree: All levels are filled except possibly the last layer. Nodes are placed as far to the left as possible.
2. All descendants of a node are larger than the node itself. However, they do not need arranging in any further order.

While heap is commonly represented as a binary tree, it is often implemented with an array containing the level-order traversal of the tree instead.

![](heap 2.png)

The first node is usually omitted - the heap is counted from 1 onwards. Because of the complete binary tree property, the heap has an interesting property that at every node with position $i$ in the array

| Node | Position |
| :--- | :--- |
| Left child | $2*i$ |
| Right child | $2*i+1$ |
| Parent | $i//2$ |

Here is an example implementation of Min Heap i.e. a heap that gives you the minimum element in $O(1)$ time complexity from [LeetCode](https://leetcode.com/explore/learn/card/heap/643/heap/4017/).

```python
# Implementing "Min Heap"
class MinHeap:
    def __init__(self, heapSize):
        # Create a complete binary tree using an array
        # Then use the binary tree to construct a Heap
        self.heapSize = heapSize
        # the number of elements is needed when instantiating an array
        # heapSize records the size of the array
        self.minheap = [0] * (heapSize + 1)
        # realSize records the number of elements in the Heap
        self.realSize = 0

    # Function to add an element
    def add(self, element):
        self.realSize += 1
        # If the number of elements in the Heap exceeds the preset heapSize
        # print "Added too many elements" and return
        if self.realSize > self.heapSize:
            print("Added too many elements!")
            self.realSize -= 1
            return
        # Add the element into the array
        self.minheap[self.realSize] = element
        # Index of the newly added element
        index = self.realSize
        # Parent node of the newly added element
        # Note if we use an array to represent the complete binary tree
        # and store the root node at index 1
        # index of the parent node of any node is [index of the node / 2]
        # index of the left child node is [index of the node * 2]
        # index of the right child node is [index of the node * 2 + 1]
        parent = index // 2
        # If the newly added element is smaller than its parent node,
        # its value will be exchanged with that of the parent node 
        while (self.minheap[index] < self.minheap[parent] and index > 1):
            self.minheap[parent], self.minheap[index] = self.minheap[index], self.minheap[parent]
            index = parent
            parent = index // 2
    
    # Get the top element of the Heap
    def peek(self):
        return self.minheap[1]
    
    # Delete the top element of the Heap
    def pop(self):
        # If the number of elements in the current Heap is 0,
        # print "Don't have any elements" and return a default value
        if self.realSize < 1:
            print("Don't have any element!")
            return sys.maxsize
        else:
            # When there are still elements in the Heap
            # self.realSize >= 1
            removeElement = self.minheap[1]
            # Put the last element in the Heap to the top of Heap
            self.minheap[1] = self.minheap[self.realSize]
            self.realSize -= 1
            index = 1
            # When the deleted element is not a leaf node
            while (index <= self.realSize // 2):
                # the left child of the deleted element
                left = index * 2
                # the right child of the deleted element
                right = (index * 2) + 1
                # If the deleted element is larger than the left or right child
                # its value needs to be exchanged with the smaller value
                # of the left and right child
                if (self.minheap[index] > self.minheap[left] or self.minheap[index] > self.minheap[right]):
                    if self.minheap[left] < self.minheap[right]:
                        self.minheap[left], self.minheap[index] = self.minheap[index], self.minheap[left]
                        index = left
                    else:
                        self.minheap[right], self.minheap[index] = self.minheap[index], self.minheap[right]
                        index = right
                else:
                    break
            return removeElement
    
    # return the number of elements in the Heap
    def size(self):
        return self.realSize
    
    def __str__(self):
        return str(self.minheap[1 : self.realSize + 1])
        

if __name__ == "__main__":
    	# Test cases
        minHeap = MinHeap(5)
        minHeap.add(3)
        minHeap.add(1)
        minHeap.add(2)
        # [1,3,2]
        print(minHeap)
        # 1
        print(minHeap.peek())
        # 1
        print(minHeap.pop())
        # 2
        print(minHeap.pop())
        # 3
        print(minHeap.pop())
        minHeap.add(4)
        minHeap.add(5)
        # [4,5]
        print(minHeap)
```

In Python, we usually just need to use the built-in `heapq` module to work with problem requiring a Min Heap.

## Problems

### 1. Kth Largest Element in a Stream

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
I got some trouble because Python's `heapq` provides support for Min Heap, but not Max Heap. However, I was then given a clever hint: the $k^{th}$ largest element is the smallest element in the largest $k$ elements (note the singular - plural nouns). Hence, a a min heap can do the job perfectly.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
The meat is defining the `.add()` method. To implement this, I need to define `self.heap` and `self.limit` (`k`) beforehand.

`.add()`: There are two case:
1. If the heap has not reached its limit, use `heapq.heappush()`.
2. Else, use `heapq.heappushpop()`.
3. Return the first element i.e., the minimum element.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n \times log(k))$: Every call with `heapq.heappush()` or `heapq.heappushpop()` with `.add()` costs $O(log(k))$. In the constructor method, $n$ such calls happen - hence the time complexity.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(k)$: The internal `self.heap` only contains up to $k$ elements at a time.

#### Code
```python
import heapq

class KthLargest:

    def __init__(self, k: int, nums: List[int]) -> None:
        self.heap = []
        self.limit = k
        for num in nums:
            self.add(num)

    def add(self, val: int) -> int:
        if len(self.heap) < self.limit:
            heapq.heappush(self.heap, val)
        else:
            heapq.heappushpop(self.heap, val)
        return self.heap[0]


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
```
### 2. Last Stone Weight

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
This is a problem that cannot avoid max heap. Well, luckily it can be constructed with a min heap - all I have to do is negating the value of the element.

#### Approach
<!-- Describe your approach to solving the problem. -->

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

#### Code
```python
class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:        
        stones = [-i for i in stones]
        heapq.heapify(stones)

        while len(stones) > 1:
            stone1 = heapq.heappop(stones)
            stone2 = heapq.heappop(stones)

            if stone1 != stone2:
                heapq.heappush(stones, stone1 - stone2)

        if len(stones) == 1:
            return - stones[0]
        return 0
```