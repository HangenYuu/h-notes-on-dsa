---
title: "Tree"
description: "Mostly binary tree"
author: "Pham Nguyen Hung"
date: last-modified
date-format: long
draft: false
toc: true
---
Firstly, See [About](https://h-notes-on-dsa.netlify.app/about.html) page.

# Tree

## Definitions

The upgraded version of a linked list.

- It is acyclic (doesn't contain any cycles);
- There exists a path from the root to any node;
- Has $N - 1$ edges, where $N$ is the number of nodes in the tree; and
- Each node has exactly one parent node with the exception of the root node.

For binary tree, all nodes have at most 2 children.
```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
```
| Terms | Meaning |
| ----- | ------- |
| Node & Edges  | Trivia |
| Root          | The first node |
| Leaf node     | Node with no child |
| Internal node | Node with at least one child |
| Ancestor      | Nodes that are between the path<br/>from the root to the current root.<br/> Including the node itself |
| Descendent    | Nodes that are between the path<br/>from the root to the current root.<br/> Including the node itself |
| Level         | Number of ancestors from that node<br/>until the root node. Start at 0 or 1, go down. |
| Height        | Number of edges on the longest path from<br/>that node to a leaf. Start at 0, go up. |
| Depth         | Number of edges on the path from root<br/>to that node. Start at 0, go down. |


## Categories

**Full binary tree**
: Every node has 0 or 2 children.

**Complete binary tree**
: All levels are completely filled except possibly the last level. All nodes are as far left as possible.

**Perfect binary tree**
: All internal nodes have two children and all leaf nodes have the same level

**Balanced binary tree**
: Every node fulfil the condition: height difference of the left and right subtree of the node is not more than than 1. Searching, insertion, and deletion in a balanced binary tree takes $O(logn)$ instead of $O(n)$ in an unbalanced binary tree.

## Notes:

### 1. Depth-first search

**Depth-first search** is the first heavily used technique. It is essentially *pre-order traversal* of a tree. All traversal types are given here:
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

    def pre_order_traversal(self, root: TreeNode):
        if root is not None:
            print(root.val)
            pre_order_traversal(root.left)
            pre_order_traversal(root.right)

    def in_order_traversal(self, root: TreeNode):
        if root is not None:
            in_order_traversal(root.left)
            print(root.val)
            in_order_traversal(root.right)
    
    def post_order_traversal(self, root: TreeNode):
        if root is not None:
            post_order_traversal(root.left)
            post_order_traversal(root.right)
            print(root.val)
```
Depth-first search is often implemented in recursion. In thinking in recursion, the most important thing is visualization of the call stack. 

In thinking in recursion, one must forget the whole picture and start thinking about each node. For each node, decide how the information there should be processed, then recurse on the children. When you are a node, the only thing you know are 1. node value and 2. how to get to children. The recursive function should manipulate these things.

In defining the recursive functions, there are two things to decide when we define:

1. `return` value - the value the child passes to the parent. For example, for the max depth problem this is the max depth for the current node's subtree.
2. state - the value the parent passes to the child. For example, to know if the current node's value is larger than its parent we have to maintain the parent's value as a state.

Another way to solve the problem is to replace `return` value with a global variable.

## Problems

### 1. Flatten Binary Tree to Linked List

#### Intuition

Depth-first search is recursion. The problem is constructing a repeatable sequence that can lead to the final result. The hint was "it looks like pre-order traversal". It was about traversing to the left child first after the current node. But the key sequence is *from the root, attaching the right child to the rightmost node in the left subtree, and move the left child i.e., the root of the left subtree to the right*. And then move on to the right child, formerly the left child.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Traverse the binary tree, check the existsnce of the left child of the current node.
2. If the left child exists, find the rightmost node in the left subtree.
3. Set the right child of the current node as the right child of the rightmost node above.
4. Set the left child of the current node as its right child.
5. Set the left child of the current node as None.
6. Move to the right child

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n)$: Iterate the binary tree.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: The tree is modified in-place.

#### Code
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        # Edge case
        if not root:
            return
        
        # General case
        current = root
        while current:
            if current.left:
                last = current.left
                
                while last.right:
                    last = last.right
                
                last.right = current.right
                current.right = current.left
                current.left = None
            
            current = current.right
```