---
title: "Two pointers"
description: "Two pointers"
author: "Pham Nguyen Hung"
date: last-modified
date-format: long
draft: false
toc: true
---
Firstly, See [About](https://h-notes-on-dsa.netlify.app/about.html) page.

# Two pointers

## Definitions:

This is not a data structure, but a pattern of coding interview questions. This is something passed down from languages with pointers such as C++ or Java. The idea is that we will traverse the array in both direction. This operation has use in some problems, particularly palindrome checking.

## Problem

### 1. Valid Palindrome

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The **basic problem** of two pointers. The problem can be solved by many ways (strip the string then reverse, etc.), but the most straightforward way if you know two pointers is using two pointers. You will traverse the string in both directions, bypassing *non-alphanumeric* characters. For each alphanumeric pairs, the lowercase versions of the character must match.

#### Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize two pointers.
2. Traverse the array from both ends.
3. For both pointers, if we encounter a non-alphanumeric characters, we increment or decrement further.
4. If we encounter a differing pair, return False immediately.
5. At the end, return True if the right end (or the left end, depending on which pointer is moved first) has moved, else False (this is to resolve edge cases suchas `".,"`).

#### Complexity
- Time complexity: 
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n)$: Traversin the whole array once.
g
- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: Pointers are essentially integers.

#### Code
```python
class Solution:
    def isPalindrome(self, s: str) -> bool:
        # Edge case
        if len(s) < 2:
            return True

        # General case
        leftPointer, rightPointer = 0, len(s) - 1
        while leftPointer <= rightPointer:
            while (leftPointer < rightPointer) and (not s[leftPointer].isalnum()):
                leftPointer += 1
            while (leftPointer < rightPointer) and (not s[rightPointer].isalnum()):
                rightPointer -= 1
            
            if s[leftPointer].lower() != s[rightPointer].lower():
                return False
            leftPointer += 1
            rightPointer -= 1
        
        return rightPointer < len(s) - 1
```

### 2. Two Sum II - Input Array Is Sorted

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
If we set up  two pointers at the start and the end, if the sum of the two numbers is larger, the *only* way to make it smaller is to decrement the right pointer. Likewise, the *only* way to make it larger is to increment the left pointer.

#### Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize two pointers.
2. Traverse the array, decrement the right and increment the left accordingly.
3. Return the required indices when found.

#### Complexity
- Time complexity: 
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n)$: Traversin the whole array once.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: Pointers are essentially integers.

#### Code
```python
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left, right = 0, len(numbers)-1
        while left < right:
            while numbers[left] + numbers[right] > target:
                right -= 1
            while numbers[left] + numbers[right] < target:
                left += 1
            if numbers[left] + numbers[right] == target:
                return [left+1, right+1]
```

### 3. 3Sum

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
If we sort the array, the problem can be turned into a two-pointer problem, where we fix the first value and then use two pointers to search for the remaining two values. There arises a bigger problem though: dealing with duplicates. The best approach is to deal with duplicates after we have found a satisfying triplet. 

#### Approach
<!-- Describe your approach to solving the problem. -->
1. Sort the array
2. Nested for loop: Traverse the array. For each value, traverse the remaining array with two pointers to look for the satisfying triplets. Take care to deal with duplicates after finding a satisfying triplet.
3. Return the result.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n^2)$: We use a nested for loop to traverse the array.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: If we ignore the returning array. If not, the complexity is $O(k)$ for k the number of triplets.

#### Code
```python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 3:
            return [nums] if sum(nums) == 0 else []
        nums.sort()
        cur, res = 0, []
        while cur < len(nums) - 2:
            # A nice little improvement: once the smallest value is positive, we
            # can safely conclude the search.
            if nums[cur] > 0:
                break
            left, right = cur + 1, len(nums) - 1
            remain = - nums[cur]
            while left < right:
                # print('Sum:', nums[left] + nums[right])
                if nums[left] + nums[right] < remain:
                    left += 1
                elif nums[left] + nums[right] > remain:
                    right -= 1
                elif nums[left] + nums[right] == remain:
                    res.append([nums[left], nums[right], nums[cur]])
                    # This is where we decrement and increment the pointers to deal with duplicates. 
                    while left < len(nums)-1 and nums[left+1] == nums[left]:
                        left += 1
                    while left < len(nums)-1 and nums[right-1] == nums[right]:
                        right -= 1
                    left += 1
                    right -= 1
            while cur < len(nums) - 2 and nums[cur+1] == nums[cur]:
                cur += 1
            cur += 1
        return res
```
### 4. Container With Most Water

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The trick is the idea of *maximum so far*. This appears a lot in problems where we need to iterate the array and update an extremum as we go along. The rule for moving the pointer comes from the question: *How do I potentially increase the value of maximum area so far?*. The answer is by moving the *smaller* pointer, the bottleneck in calculating the amount of water the container can hold.

An improvement on the solution is a simple check-up. Taking the width constant, the best container is the one with the maximum height. Therefore, at any moment the volume of the best container possible with the current width cannot surpass the maximum so far, we can safely break out of the for loop. 

#### Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize: 2 pointers, maximum so far, and maximum height.
2. Traverse the array with two pointers. Update the maximum height as we go along.
3. Once the terminating condition is met, return the maximum so far.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n)$: We need to traverse the array once...
- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: ... and store a bunch of integers.

#### Code
```python
class Solution:
    def maxArea(self, height: List[int]) -> int:
        maxSoFar = -1
        left, right = 0, len(height)-1
        maxHeight = max(height)
        while left < right:
            minHeight = min(height[left], height[right])
            maxSoFar = max(maxSoFar, (right-left)*minHeight)
            if height[left] == minHeight:
                left += 1
            else:
                right -= 1
            if maxHeight*(right - left) <= maxSoFar:
                break
        return maxSoFar        
```
### 5. Trapping Rain Water

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
- Deal with the calculation one element at a time.
- Need to keep the maximum left and right heights.
- The water trapped depends on the smaller maximum height.
- Let's say the maximum left height is smaller. The water trapped is the difference between the maximum left height and the current left height, which is >= 0.
- We need to increment the side with the smaller maximum height. 

#### Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize pointer and maximum height for each side.
2. Traverse the array. Increment the side with the smaller maximum height. Update the maximum height at that side and the water trapped so far.
3. Return the result.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n)$: We need to traverse the array once...
- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: ... and store a bunch of integers.

#### Code
```python
class Solution:
    def trap(self, height: List[int]) -> int:
        if not height:
            return 0
        left, right = 0, len(height) - 1
        leftMax, rightMax=  height[left], height[right]
        res = 0
        while left < right:
            if leftMax < rightMax:
                left += 1
                leftMax = max(leftMax, height[left])
                res += leftMax - height[left]
            else:
                right -= 1
                rightMax = max(rightMax, height[right])
                res += rightMax - height[right]
        return res
```