---
title: "Graph"
description: "Graph"
author: "Pham Nguyen Hung"
date: last-modified
date-format: long
draft: false
toc: true
---
Firstly, See [About](https://h-notes-on-dsa.netlify.app/about.html) page.

# Graph:

## Definitions:

- A nonlinear data structure consists of nodes connected by vertices.
- A graph can be undirected, directed, or weighted.

## Disjoint set:

*Represented as a data structures in LeetCode's terminology*

Helps to register the connectivity of a graph/network. Consists of two arrays:

1. Store the node itself (represented by index)
2. Store the parent/root vertex of the node

The problem of checking connectivity is reduced to the problem of checking whether two nodes have the same root node.

The disjoint set has two essential methods: `find()` and `union()`.
`find()`
: find the root node of a given vertex

`union()`
: unions two vertices and makes their root nodes the same

### Initialization:

- Start with creating an array with array[i]=i
- Can implement with emphasis on `find()` (Quick Find) or `union()` (Quick Union)

### Quick Find:

Instead of storing the parent node, the array will store the root node straight-away. This makes for a quick `find()` but slower `union()` as we need to search the entire array.
```{python}
# UnionFind class
class UnionFind:
    def __init__(self, size):
        self.root = [i for i in range(size)]

    def find(self, x):
        return self.root[x]
		
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            for i in range(len(self.root)):
                if self.root[i] == rootY:
                    self.root[i] = rootX

    def connected(self, x, y):
        return self.find(x) == self.find(y)


# Test Case
uf = UnionFind(10)
# 1-2-5-6-7 3-8-9 4
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))  # true
print(uf.connected(5, 7))  # true
print(uf.connected(4, 9))  # false
# 1-2-5-6-7 3-8-9-4
uf.union(9, 4)
print(uf.connected(4, 9))  # true
```

#### Time Complexity:

| | **Union-Find Constructor** | **Find** | **Union** | **Connected** |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| **Time Complexity** | $O(N)$ | $O(1)$ | $O(N)$ | $O(1)$ |

The **Union-Find Constructor** is 1-liner in Python but it takes linear time to initialize in the system.
#### Space Complexity:
$O(N)$ to store each node.

### Quick Union:
`union()` stops at setting the root node of the child to the root node of the parent only. `find()` and `connected()` will need to traverse more to find the answer. The worst-case time complexity for each operation swells to $O(N)$, but the overall efficiency *goes up*.

```{python}
# UnionFind class
class UnionFind:
    def __init__(self, size):
        self.root = [i for i in range(size)]

    def find(self, x):
        while x != self.root[x]:
            x = self.root[x]
        return x
		
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            self.root[rootY] = rootX

    def connected(self, x, y):
        return self.find(x) == self.find(y)


# Test Case
uf = UnionFind(10)
# 1-2-5-6-7 3-8-9 4
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))  # true
print(uf.connected(5, 7))  # true
print(uf.connected(4, 9))  # false
# 1-2-5-6-7 3-8-9-4
uf.union(9, 4)
print(uf.connected(4, 9))  # true
```

#### Time Complexity:

| | **Union-Find Constructor** | **Find** | **Union** | **Connected** |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| **Time Complexity** | $O(N)$ | $O(N)$ | $O(N)$ | $O(N)$ |

The **Union-Find Constructor** is 1-liner in Python but it takes linear time to initialize in the system.

Number of operations to get to the root vertex will be H, where H is the height of the tree. In the worst case, H = N if the graph is a linked list.

#### Space Complexity:
$O(N)$ to store each node.

### Optimized Quick Union - Union by rank:

First, observe that the smaller the height of the tree, the more efficient the algorithms run. So we will want to balance the tree as much as we can, but *not to try too hard*. One way to do so is *union by rank*. Rank here refers to the height of the vertex. When we union two vertices, instead of just picking the root node of one, we choose the root node of the vertex with a larger “rank”. We will merge the shorter tree under the taller tree and assign the root node of the taller tree as the root node for both vertices.

This is an optimization for Quick Union. To implement this, we need to make 2 changes:

1. Adding an array `rank` to keep track of the rank of each vertex.
2. Modify the codes of `union()`. It is easy for the case of unequal rank. For the case of equal rank, we will assign one to the other (say, set root of Y to root of X) and increase the height of the other vertex (X's height += 1).

```{python}
# UnionFind class
class UnionFind:
    def __init__(self, size):
        self.root = [i for i in range(size)]
        self.rank = [1] * size

    def find(self, x):
        while x != self.root[x]:
            x = self.root[x]
        return x
		
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.root[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.root[rootX] = rootY
            else:
                self.root[rootY] = rootX
                self.rank[rootX] += 1

    def connected(self, x, y):
        return self.find(x) == self.find(y)


# Test Case
uf = UnionFind(10)
# 1-2-5-6-7 3-8-9 4
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))  # true
print(uf.connected(5, 7))  # true
print(uf.connected(4, 9))  # false
# 1-2-5-6-7 3-8-9-4
uf.union(9, 4)
print(uf.connected(4, 9))  # true
```

#### Time Complexity:

| | **Union-Find Constructor** | **Find** | **Union** | **Connected** |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| **Time Complexity** | $O(N)$ | $O(logN)$ | $O(logN)$ | $O(logN)$ |

- The **Union-Find Constructor** is 1-liner in Python but it takes linear time to initialize in the system.
- Tree height will be at most log(N) + 1 when we repeatedly union components of equal rank, so `find()` will take O(logN) in the case.
- `union()` and `connected()` depends on `find()`, so they need O(logN) as well.

#### Space Complexity:
$O(N)$ to store the value and the rank of each node.

### Optimized Quick Find - Path Compression:

After finding the root node, we update the parent node of all traversed elements to their root node. We implement this with recursion.
```{python}
# UnionFind class
class UnionFind:
    def __init__(self, size):
        self.root = [i for i in range(size)]

    def find(self, x):
        if x == self.root[x]:
            return x
        self.root[x] = self.find(self.root[x])
        return self.root[x]
		
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            self.root[rootY] = rootX

    def connected(self, x, y):
        return self.find(x) == self.find(y)


# Test Case
uf = UnionFind(10)
# 1-2-5-6-7 3-8-9 4
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))  # true
print(uf.connected(5, 7))  # true
print(uf.connected(4, 9))  # false
# 1-2-5-6-7 3-8-9-4
uf.union(9, 4)
print(uf.connected(4, 9))  # true
```
#### Time Complexity:

| | **Union-Find Constructor** | **Find** | **Union** | **Connected** |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| **Time Complexity** | $O(N)$ | $O(logN)$ | $O(logN)$ | $O(logN)$ |

- The **Union-Find Constructor** is 1-liner in Python but it takes linear time to initialize in the system.
- The worst-case call of `find()` will take O(N), but it will take O(1) afterwards. Average out, it takes O(logN) time to perform.
- `union()` and `connected()` depends on `find()`, so they need O(logN) as well.

#### Space Complexity:
$O(N)$ to store the value and the rank of each node.

### Final disjoint set with Path Compression and Union by Rank:
```{python}
# UnionFind class
class UnionFind:
    def __init__(self, size) -> None:
        """
        Function to initialize the UnionFind class

        :param size: the number of nodes in the set
        :return: None
        """
        self.root = [i for i in range(size)]
        self.rank = [1]*size
    
    def find(self, node):
        """
        Function to return the root of a node. Recursively
        modify the parent node if it is not yet the root

        :param node: the node to search root for\
        :return: the root node
        """
        if node == self.root[node]:
            return node
        # Parent node is not itself and possibly not the
        # root node

        # Set the root of node to the root of the parent node
        # of node
        self.root[node] = self.find(self.root[node])
        return self.root[node]

    def union(self, node1, node2):
        root1 = self.find(node1)
        root2 = self.find(node2)
        # Do nothing if the two nodes are already connected
        # Set the root of both nodes to the root of the node
        # with heigher rank (height)
        # In case of equal rank, set to the root of one node
        # and increase the rank of that node
        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.root[root2] = root1
            elif self.rank[root1] < self.rank[root2]:
                self.root[root1] = root2
            else:
                self.root[root2] = root1
                self.rank[root1] += 1
    
    def connected(self, node1, node2):
        return self.find(node1) == self.find(node2)
            

# Test Case
uf = UnionFind(10)
# 1-2-5-6-7 3-8-9 4
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))  # true
print(uf.connected(5, 7))  # true
print(uf.connected(4, 9))  # false
# 1-2-5-6-7 3-8-9-4
uf.union(9, 4)
print(uf.connected(4, 9))  # true
```
#### Time Complexity:

| | **Union-Find Constructor** | **Find** | **Union** | **Connected** |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| **Time Complexity** | $O(N)$ | $O(\alpha(N))$ | $O(\alpha(N))$ | $O(\alpha(N))$ |
$\alpha(N)$ is the inverse Ackermann function, which is $O(1)$ on average.


#### Space Complexity:
$O(N)$ to store the value and the rank of each node.

### Problems

#### 1. Number of provinces

The basic problem applying the disjoint set approach. A province is essentially a network, and two provinces are two disconnected networks. We just need to keep track of the number of provinces when we perform union.

##### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->


##### Approach
<!-- Describe your approach to solving the problem. -->


##### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

##### Code
```python
# UnionFind class
class UnionFind:
    def __init__(self, size):
        self.root = [i for i in range(size)]
        # Use a rank array to record the height of each vertex, i.e., the "rank" of each vertex.
        # The initial "rank" of each vertex is 1, because each of them is
        # a standalone vertex with no connection to other vertices.
        self.rank = [1] * size
        self.count = size

    # The find function here is the same as that in the disjoint set with path compression.
    def find(self, x):
        if x == self.root[x]:
            return x
        self.root[x] = self.find(self.root[x])
        return self.root[x]

    # The union function with union by rank
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.root[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.root[rootX] = rootY
            else:
                self.root[rootY] = rootX
                self.rank[rootX] += 1
            self.count -= 1

    def getCount(self):
        return self.count
```

```python
# The base problem for the whole class
# Number of provinces are the number of disjoint sets left after performing all unions.
# To achieve the goal, in addition to performing union-find, one also needs to take 
# care of the counting, which could be easily handled by deducting the number of nodes
# after every union. 
class Solution:
    def findCircleNum(self, isConnected: list[list[int]]) -> int:
        if not isConnected or len(isConnected) == 0:
            return 0
        n = len(isConnected)
        uf = UnionFind(n)
        for row in range(n):
            for col in range(row + 1, n):
                if isConnected[row][col] == 1:
                    uf.union(row, col)
        return uf.getCount()
```
#### 2. Number of Connected Components in an Undirected Graph

Essentially the Number of Provinces problem. For this one, I tried not defining a separate UnionFind class but just the `find()` and `union()` functions.

##### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->


##### Approach
<!-- Describe your approach to solving the problem. -->


##### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

##### Code
```python
class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        rank = [1] * n
        root = [i for i in range(n)]
        
        def find(x):
            if x == root[x]:
                return x
            root[x] = find(root[x])
            return root[x]
        
        def union(x, y):
            # Declare n nonlocal to update n right in the union function
            nonlocal n
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                if rank[rootX] > rank[rootY]:
                    root[rootY] = rootX
                elif rank[rootX] < rank[rootY]:
                    root[rootX] = rootY
                else:
                    root[rootY] = rootX
                    rank[rootX] += 1
                n -= 1
        
        for edge in edges:
            union(edge[0], edge[1])
        
        return n
```
#### 3. Graph Valid Tree

A tree means that:

1. Number of edges provided must be at least the number of nodes - 1
2. There is no cycle.

We will use properties 1. to quickly rule out cases and 2. to implement the general algorithm. Property 2. is satisfied if we do not encounter two nodes with the same root when we perform the union operation; when we encounter such a case, we can return `False` immediately.

##### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->


##### Approach
<!-- Describe your approach to solving the problem. -->


##### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

##### Code
```python
class Solution:
    def validTree(self, n: int, edges: list[list[int]]) -> bool:
        # write your code here
        # Check the number of provinces
        # False if more than 1
        if len(edges) < n - 1:
            return False
        uf = UnionFind(n)
        for A, B in edges:
            if not uf.union(A, B):
                return False
        return True
```
#### 4. The Earliest Moment When Everyone Become Friends
A.k.a the earliest moment the number of provinces goes to 1. If after performing all union operations, the number of provinces is larger than 1, we return -1

##### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->


##### Approach
<!-- Describe your approach to solving the problem. -->


##### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

##### Code
```python
from typing import List

class Solution:
    def earliestAcq(self, logs: List[List[int]], n: int) -> int:
        logs.sort()
        root = [i for i in range(n)]
        rank = [1] * n

        def find(x):
            if x == root[x]:
                return x
            root[x] = find(root[x])
            return root[x]
        
        def union(x, y):
            nonlocal n
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                if rank[rootX] > rank[rootY]:
                    root[rootY] = rootX
                elif rank[rootX] < rank[rootY]:
                    root[rootX] = rootY
                else:
                    root[rootY] = rootX
                    rank[rootX] += 1
                n -= 1
        
        for timestamp, x, y in logs:
            union(x, y)
            if n == 1:
                return timestamp
                
        return -1
```
#### 5. Smallest string with swaps:
The intuition here is recognizing that when the connected nindices form a graph that enable the corresponding characters to move around at will. THis means that we need to partition the indices into disjoint sets and *sort within each set* before joining them together to form the result.

##### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->


##### Approach
<!-- Describe your approach to solving the problem. -->


##### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

##### Code
```python
class Solution:
    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:
        length = component = len(s)
        root = [i for i in range(length)]
        rank = [1] * length

        def find(x):
            if x == root[x]:
                return x
            root[x] = find(root[x])
            return root[x]
        
        def union(x, y):
            nonlocal component
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                if rank[rootX] > rank[rootY]:
                    root[rootY] = rootX
                elif rank[rootX] < rank[rootY]:
                    root[rootX] = rootY
                else:
                    root[rootY] = rootX
                    rank[rootX] += 1
                component -= 1
        for pair in pairs:
            union(pair[0], pair[1])
        
        # Easy case where every character is connected
        if component == 1:
            return ''.join(sorted(s))
        
        # General case
        # We can only swap the the connected characters
        listS = list(s)
        copyListS = listS[:]
        rootDict = {}
        for i in range(length):
            rootI = find(i)
            if rootI in rootDict:
                rootDict[rootI].append(i) # Ensure the nodes assoc. with a key is already sorted
            else:
                rootDict[rootI] = [i]

        for connections in rootDict.values():
            sortedConnections = sorted(connections, key = lambda x:ord(s[x]))
            for i in range(len(connections)):
                copyListS[connections[i]] = listS[sortedConnections[i]] 
        
        return ''.join(copyListS)
```