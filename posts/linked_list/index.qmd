---
title: "Linked List"
description: "Linke List"
author: "Pham Nguyen Hung"
date: "03/07/2023"
draft: false
toc: true
---
Firstly, See [About](https://h-notes-on-dsa.netlify.app/about.html) page.

# Linked List:

## Definitions:

- A nonlinear data structure consists of nodes with pointers to the next nodes.
- A linked list can be singly-linked, or doubly-linked, with just head pointer or together with tail pointer.
- For LeetCode, a singly-linked list with head pointer is usually given.
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
```
- May fall under many patterns, such as fast and slow pointers.

## General trick:

### 1. Sentinel head (also tail):

We create a dummy head first, modify everything after, and then return the actual head with `dummy.next`
```python
dummy = ListNode(None)
head = dummy
# Do a lot of stuff with head
return dummy.next
```
This is useful as we can use the `head` as a pointer to traverse the linked list while still need to return the head of the linked list in result. 

## Problems:

### 1. Reverse Linked List

The introductory problem to using the three pointers - `pre`, `cur`, and `nex` to keep track of the node in the list. Can be used to solve a sub-problem in the future.
```python
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Easy case:
        if head is None or head.next is None:
            return head
        
        # General case:
        pre, cur, nex = None, head, head.next
        while nex:
            cur.next = pre
            pre = cur
            cur = nex
            nex = nex.next
        cur.next = pre
        return cur
```

### 2. Merge Two Sorted Lists

Choose a new linked list. Move the two head pointers down the two lists, compare the nodes, and splice them accordingly.
```python
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        # Easy case
        if list1 is None:
            return list2
        if list2 is None:
            return list1
        
        # General case
        # Most straightforward way is to create a new linked list
        # Utilize the sentinel head trick here
        dummy = ListNode()
        head = dummy

        # One list will reach the end before the other, so it is divided into 2 steps:
        # 1. Compare and splice the nodes in the two list
        # 2. Add the rest of one list to the end of the result.
        while list1 and list2:
            if list1.val <= list2.val:
                head.next = list1
                list1 = list1.next
            else:
                head.next = list2
                list2 = list2.next
            head = head.next
        
        if list1:
            head.next = list1
        elif list2:
            head.next = list2
        
        return dummy.next
```

### 3. Linked List Cycle

The introductory fast and slow pointers problem. Because there is a loop, the fast and slow pointers are bound to meet with each other somewhere.
```python
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        # Easy case
        if head is None or head.next is None:
            return False
        
        # General case
        fast = slow = head
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        return False
```

### 4. Remove Nth Node From End of List

The idea is to initialize two fast and slow pointers, but started at different positions while moving at the same speed. We want that when the fast pointer hits the end, the slow pointer is at the node before the to-be-removed node to rearrange the connection.
```python
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # Easy case
        if head.next is None:
            return
        
        # General case
        # Fast and slow pointer
        slow = fast = head
        for _ in range(n+1):
            if fast:
                fast = fast.next
            else:
            # If fast pointer is already None before the end, there is just one
            # case and it is the head needs removing, so we return the next element
                return head.next
        # If not, we start to move the slow and fast pointers to the end.
        while fast:
            slow, fast = slow.next, fast.next
        
        slow.next = slow.next.next
        
        return head
```

### 5. Reorder List

The task can be divided into 3 parts:

1. Divide the original list into 2.
2. Reverse the second half.
3. Merge the two halves.

Here we saw for the first time all the problems above come together into one problem. Here you see that I turned the second part into another hidden method within the `Solution` class. This is one way to do it. Another is to define the function *within* the function (nested function), which you will see many Python LeetCoders do. These two methods are equivalent in solving LeetCode problems. For outside world, I think that my current method is more appreciated, as of [here](https://realpython.com/inner-functions-what-are-they-good-for/).
```python
class Solution:
    def _reverseList(self, head: ListNode):
        pre, cur, nex = None, head, head.next
        while nex:
            cur.next = pre
            pre = cur
            cur = nex
            nex = nex.next
        cur.next = pre
        return cur
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        # Easy case:
        if head.next is None or head.next.next is None:
            return
        
        # General case:
        fast = slow = temp1 = temp2 = head
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
        temp2 = slow.next
        slow.next = None
        del slow, fast
        temp2 = self._reverseList(temp2)
        nex1, nex2 = temp1.next, temp2.next
        while nex2:
            temp1.next = temp2
            temp2.next = nex1
            temp1, temp2 = nex1, nex2
            nex1, nex2 = nex1.next, nex2.next
        temp1.next = temp2
        if nex1:
            temp2.next = nex1
```

### 6. Find the Duplicate Number

This is not a Linked List question, but it utilizes the fast and slow pointers to turn it into a linked list question in the subtlest way possible. As noted in the editorial, this is similar to [Linked List Cycle II](https://leetcode.com/problems/linked-list-cycle-ii/description/). In the original one, fast and slow pointer is used to detect the cycle. Now the objective is to return the cycle entrance. Fast and slow pointers can be proved mathematically to work for that problem, by having the fast pointer starts at the intersection and the slow pointer starts at the start, they will meet each other at the entrance!
```python
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        # Phase 1: Intersection point
        fast = slow = nums[0]
        while True:
            fast = nums[nums[fast]]
            slow = nums[slow]
            if fast == slow:
                break
        
        # Phase 2: Find the cycle entrance
        slow = nums[0]
        while slow != fast:
            fast = nums[fast]
            slow = nums[slow]
        
        return slow
```

### 7. Copy List with Random Pointer

Sometimes overthinking is a big problem. This question is super hard - if you try to do it in one go. The secret is to not do so. You do it in 2 passes. And use a HashMap to keep track of the copy.
```python
"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        # The first key in the dictionary to deal with the pointer to 
        # None of a node.
        oldToCopy = {None: None}

        # 1st pass: Create all the nodes only
        cur = head
        while cur:
            oldToCopy[cur] = Node(cur.val)
            cur = cur.next
        
        # 2nd pass: Create the links within the list
        cur = head
        while cur:
            copy = oldToCopy[cur]
            copy.next = oldToCopy[cur.next]
            copy.random = oldToCopy[cur.random]
            cur = cur.next
        
        return oldToCopy[head]
```

### 8. Palindrome Linked List

Here we see the reverse linked list sub-problem becomes relevant again. The algorithm is:

1. Go to the middle of the linked list and divide it in 2 halves.
2. Reverse the second half.
3. Check each pair of nodes of two halves and return result.
```python
class Solution:
    def _reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        pre, cur, nex = None, head, head.next
        while nex:
            cur.next = pre
            pre = cur
            cur = nex
            nex = nex.next
        cur.next = pre
        return cur

    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        # Easy case:
        if head is None or head.next is None:
            return True
        
        # General case:
        slow, fast = head, head.next
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        if not fast.next:
            temp = slow.next
            slow.next = None
        else:
            temp = slow.next.next
            slow.next.next = None
        temp = self._reverseList(temp)
        while temp:
            if temp.val != head.val:
                return False
            temp, head = temp.next, head.next
        return True
```