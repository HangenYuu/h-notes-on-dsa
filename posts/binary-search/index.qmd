---
title: "Binary search"
description: "Binary search"
author: "Pham Nguyen Hung"
date: last-modified
date-format: long
draft: false
toc: true
---
Firstly, See [About](https://h-notes-on-dsa.netlify.app/about.html) page.

# Binary search

## Definitions:

In a sorted array, there exists a faster way to search for a specific element than visiting each element. The intuition is if I find an element that is smaller than expected, all of the elements before it are also smaller and can be discarded from the search and likewise if it is larger. The optimal way to take advantage of this property is striking in the middle every time, hence the name binary search.

## Problem

### 1. Binary serach

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The **basic problem** of binary search. It basically asks you to implement it.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize two pointers - `start` and `end`.
2. Traverse the array from both ends.
3. Calculate `middle = (start + end)//2` and compare `array[middle]` with the target.
4. If I found the target, return `middle`. If I am smaller, move `start` to `middle`. If I am larger, move `end` to `middle`.
5. If I reach the end, return -1 as I do not find the target.

#### Complexity
- Time complexity: 
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(logn)$: I am cutting the array in half repeatedly, so it takes just $logn$ to search.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: Pointers are essentially integers.

#### Code
```python
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # Edge case
        if nums[0] > target or nums[-1] < target:
            return -1
        
        # General case
        if nums[0] == target:
            return 0
        if nums[-1] == target:
            return len(nums) - 1
        start, end = 0, len(nums) - 1
        while start <= end:
            mid = (start + end)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                start = mid + 1
            else:
                end = mid - 1
        
        return -1
```

### 2. First Bad Version

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
For any call `isBadVersion(version)`, if the version is good, it means that the first bad version *will be* a later version; if the version is bad, it means that the first bad version *might be* an older version. And given the version comes in non-decreasing order, that sounds exactly like a binary search problem. Notice the italic *will be* and *might be* - it will affect the way I implement the algorithm.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize two pointers - `first` and `last` or whatever to the first and the last version, denoted by numbers.
2. The terminating condition for this specific implementation is `first == last`, so the loop condition is `while first < last`.
3. I will check the `mid` version. If it is bad, I will shift `last` to `mid`. If it is good, I will shift `first` to `mid + 1`.
4. Return `first` (or `last` - does not matter) when the loop terminates. Cannot return `mid` here as the variable does not exist outside the loop. You can define it so, but there's no need to.

#### Complexity
- Time complexity: 
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(log(n))$: The default time complexity of binary search.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: Pointers are essentially integers.

#### Code
```python
# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        low, high = 1, n
        while low < high:
            mid = (low+high)//2
            if isBadVersion(mid):
                high = mid
            else:
                low = mid + 1
        return low #high
```

### 3. Search a 2D Matrix

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The matrix is sorted + time complexity requirement of $O(log(m*n))$ &rarr; a binary search problem where I need to do binary search two times.

The first binary search is for the row `target` is in. The condition to satisfy is `start` < `target` < `end`. I can move `start` and `end` if the end of the row is smaller than `target` and the start of the row is larger than `target`, respectively.

The next binary search within the row is trivial.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize pointers. I need to store the index of the row so initialize an extra one.
2. Perform binary search based on conditions above to find the row.
3. Reinitialize pointers.
4. Perform a normal binary search within the row and return result accordingly.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(log(m*n))$: Two binary searches were performed, one to find the row, and one within the row.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: I only need to store pointers.

#### Code
```python
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        # O(log(m*n)) = O(logm) + O(logn)
        start, mid, end = 0, 0, len(matrix)-1
        while start <= end:
            mid = (start+end)//2
            if matrix[mid][0] == target or matrix[mid][-1] == target:
                return True
            elif matrix[mid][0] < target < matrix[mid][-1]:
                break
            elif matrix[mid][-1] < target:
                start = mid + 1
            elif matrix[mid][0] > target:
                end = mid - 1
        # Return False immediately if start > end
        # as it signifies no valid row found
        if start > end:
            return False
        start, end = 0, len(matrix[0]) - 1
        while start <= end:
            middle = (start+end)//2
            if matrix[mid][middle] == target:
                return True
            elif matrix[mid][middle] < target:
                start = middle + 1
            else:
                end = middle - 1
        return False
```

### 4. Koko Eating Bananas

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem is discovering what I am supposed to perform binary search on. For this purpose, I need to lean on the brute-force method. So the brute-force method is iterating all possible values of `k` from 1 to `max(piles`. The rest is realizing that this is a sorted array, hence I can perform binary search on that.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize pointers and a variable to store the result e.g., `res`.
2. Iterate the array from 1 to `max(piles)` for `k`.
2. At each value, calculate the hours taken for such `k`. If the hourse is smaller or equal to `h`, it is a likely candidate so I update the `res` if necessary and update the right pointer. Else, I update the left pointer.
3. Return `res` at the end

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(log(max(piles))*len(piles))$: For each iteration of binary search, I need to calculate the hours, which requires iterating through the array once each time.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: I need to store a bunch of variables.

#### Code
```python
from math import ceil
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        # Easy case:
        if len(piles)==h:
            return max(piles)

        # General cases:
        left, right = 1, max(piles)
        res = right
        while left <= right:
            k = (left+right)//2
            hours = 0
            for pile in piles:
                hours += ceil(pile/k)
            if hours <= h:
                right = k - 1
                res = min(res, k)
            else:
                left = k + 1
        
        return res
```

### 5. Median of Two Sorted Arrays

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The result median is the element that has roughly $(m+n)//2$ elements to both sides. I can get to this element by partitioning a certain number of elements from each array that sums up to $(m+n)//2$. The median can then be selected or calculated from the last element in the left subarray and the first element in the right subarray of each array.

The good thing is the safeguard that NeetCode came up with. The index chosen can be out of bound. For such case, I can set the variable to be $-\infty$ for the left variable or $\infty$ for the right variable, as I only need to care for the right minimum and left maximum.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize variables - the arrays, total length, half point.
2. Perform binary search on one array by selecting the left half-array every time (all elements up to index `(start+end)//2`) and take the rest from the other array. Pick out the last left element and the first right element.
3. If all the left are smaller than the other right, calculate the median. Increment the pointer to decrease/increase the number of elements taken from an array if the last left is smaller than the first right correspondingly.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(log(m+n))$: I essentially iterate a concatenated version of the two arrays.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(n)$: This implementation requires creating a copy of each array. 

#### Code
```python
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A, B = nums1, nums2
        total = len(A) + len(B)
        half = total // 2
        
        if len(B) < len(A):
            A, B = B, A
        
        l, r = 0, len(A)-1
        while True:
            i = (l+r)//2
            j = half - i -2

            Aleft = A[i] if i >= 0 else float("-infinity")
            Bleft = B[j] if j >= 0 else float("-infinity")
            Aright = A[i+1] if (i+1) < len(A) else float("infinity")
            Bright = B[j+1] if (j+1) < len(B) else float("infinity")

            # partition is correct
            if Aleft <= Bright and Bleft <= Aright:
                if total % 2:
                    return min(Aright, Bright)
                return (max(Aleft, Bleft) + min(Aright, Bright)) / 2
            elif Aleft > Bright:
                r = i - 1
            else:
                l = i + 1
```

### 6. Find the Duplicate Number

#### Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
This can be solved with fast and slow pointers. However, there exists an interesting binary search solution. It has a worse time complexity, but it is interesting to see how the problem can be framed as a binary search problem.

In an array with $n+1$ elements from $1$ to $n$, the number of elements smaller or equal than $k$ is $k$. However, if there is a duplicate, say $n$, the number of elements smaller or equal than $k$ is greater than $k$,  for all elements greater than or equal to $n$. I can use this property to perform binary search on the range $[1, n]$, searching for the first element with the number of elements smaller or equal to it greater than itself.

#### Algorithm
<!-- Describe your approach to solving the problem. -->
1. Initialize the left and right pointers.
2. Perform binary search on the range $[1, n]$. At each iteration, calculate the number of elements smaller or equal to the middle element. If the number is greater than the middle element, I know the duplicate is in the left half. Else, I know the duplicate is in the right half.
3. Return the left pointer.

#### Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
$O(n \log n)$: At each iteration of the binary search, I need to iterate through the array to calculate the number of elements smaller or equal to the middle element.
- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
$O(1)$: I only need to store pointers.

#### Code

Update: The solution cannot pass the time limit check on LeetCode. The solution is correct, but it is not efficient enough.
```python
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        left, right = 1, len(nums)-1
        while left <= right:
            mid = (left+right)//2
            less = sum(1 for num in nums if num <= mid)

            if less > mid:
                right -= 1
            else:
                left += 1
        
        return left
```